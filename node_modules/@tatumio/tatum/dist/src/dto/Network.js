"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.NATIVE_PREFIX_MAPPING = exports.MAPPED_NETWORK = exports.MappedNetwork = exports.isSameGetBlockNetwork = exports.isBnbLoadBalancerNetwork = exports.isNativeEvmLoadBalancerNetwork = exports.isXrpLoadBalancerNetwork = exports.isEosLoadBalancerNetwork = exports.isTronLoadBalancerNetwork = exports.isEvmArchiveNonArchiveBeaconLoadBalancerNetwork = exports.isEvmArchiveNonArchiveLoadBalancerNetwork = exports.isEvmLoadBalancerNetwork = exports.isLoadBalancerNetwork = exports.isEosNetwork = exports.isTronNetwork = exports.isSolanaNetwork = exports.isDataApiUtxoEnabledNetwork = exports.isDataApiEnabledNetwork = exports.isDataApiEvmEnabledNetwork = exports.isXrpNetwork = exports.isUtxoLoadBalancerNetwork = exports.isUtxoEstimateFeeNetwork = exports.isUtxoLoadBalancerEstimateFeeNetwork = exports.isUtxoBasedNetwork = exports.isEvmBasedNetwork = exports.EOS_NETWORKS = exports.TRON_NETWORKS = exports.EVM_ARCHIVE_NON_ARCHIVE_BEACON_LOAD_BALANCER_NETWORKS = exports.EVM_ARCHIVE_NON_ARCHIVE_LOAD_BALANCER_NETWORKS = exports.LOAD_BALANCER_NETWORKS = exports.BNB_LOAD_BALANCER_NETWORKS = exports.SOLANA_NETWORKS = exports.NATIVE_EVM_LOAD_BALANCER_NETWORKS = exports.XRP_LOAD_BALANCER_NETWORKS = exports.EOS_LOAD_BALANCER_NETWORKS = exports.TRON_LOAD_BALANCER_NETWORKS = exports.EVM_LOAD_BALANCER_NETWORKS = exports.UTXO_LOAD_BALANCER_NETWORKS = exports.DATA_API_NETWORKS = exports.DATA_API_EVM_NETWORKS = exports.DATA_API_UTXO_NETWORKS = exports.UTXO_ESTIMATE_FEE_NETWORKS = exports.UTXO_LOAD_BALANCER_ESTIMATE_FEE_NETWORKS = exports.UTXO_BASED_NETWORKS = exports.EVM_BASED_NETWORKS = exports.Network = void 0;
var Network;
(function (Network) {
    // Mainnets
    Network["ALGORAND"] = "algorand-mainnet";
    Network["ARBITRUM_NOVA"] = "arb-nova-mainnet";
    Network["ARBITRUM_ONE"] = "arbitrum-one-mainnet";
    Network["AURORA"] = "aurora-mainnet";
    Network["AVALANCHE_C"] = "avalanche-c-mainnet";
    Network["AVALANCHE_P"] = "avax-p-mainnet";
    Network["AVALANCHE_X"] = "avax-x-mainnet";
    Network["BINANCE_SMART_CHAIN"] = "bsc-mainnet";
    Network["BNB"] = "bnb-beacon-chain-mainnet";
    Network["BITCOIN"] = "bitcoin-mainnet";
    Network["BITCOIN_CASH"] = "bitcoin-cash-mainnet";
    Network["CARDANO"] = "cardano-mainnet";
    Network["CELO"] = "celo-mainnet";
    Network["CRONOS"] = "cro-mainnet";
    Network["DOGECOIN"] = "doge-mainnet";
    Network["EOS"] = "eos-mainnet";
    Network["HORIZEN_EON"] = "eon-mainnet";
    Network["CHILIZ"] = "chiliz-mainnet";
    Network["ETHEREUM"] = "ethereum-mainnet";
    Network["ETHEREUM_CLASSIC"] = "ethereum-classic-mainnet";
    Network["FANTOM"] = "fantom-mainnet";
    Network["FLARE"] = "flare-mainnet";
    Network["FLOW"] = "flow-mainnet";
    Network["GNOSIS"] = "gno-mainnet";
    Network["HAQQ"] = "haqq-mainnet";
    Network["HARMONY_ONE_SHARD_0"] = "one-mainnet-s0";
    Network["KLAYTN"] = "klaytn-mainnet";
    Network["KUCOIN"] = "kcs-mainnet";
    Network["LITECOIN"] = "litecoin-mainnet";
    Network["MULTIVERSX"] = "egld-mainnet";
    Network["NEAR"] = "near-mainnet";
    Network["OASIS"] = "oasis-mainnet";
    Network["OPTIMISM"] = "optimism-mainnet";
    Network["PALM"] = "palm-mainnet";
    Network["POLYGON"] = "polygon-mainnet";
    Network["POLKADOT"] = "dot-mainnet";
    Network["RSK"] = "rsk-mainnet";
    Network["SOLANA"] = "solana-mainnet";
    Network["STELLAR"] = "stellar-mainnet";
    Network["TEZOS"] = "tezos-mainnet";
    Network["TRON"] = "tron-mainnet";
    Network["VECHAIN"] = "vechain-mainnet";
    Network["XDC"] = "xdc-mainnet";
    Network["XRP"] = "ripple-mainnet";
    Network["ZCASH"] = "zcash-mainnet";
    Network["ZILLIQA"] = "zilliqa-mainnet";
    // Testnets
    Network["ALGORAND_TESTNET"] = "algorand-testnet";
    Network["ARBITRUM_NOVA_TESTNET"] = "arb-testnet";
    Network["AURORA_TESTNET"] = "aurora-testnet";
    Network["AVALANCHE_C_TESTNET"] = "avax-testnet";
    Network["AVALANCHE_P_TESTNET"] = "avax-p-testnet";
    Network["AVALANCHE_X_TESTNET"] = "avax-x-testnet";
    Network["BINANCE_SMART_CHAIN_TESTNET"] = "bsc-testnet";
    Network["BITCOIN_TESTNET"] = "bitcoin-testnet";
    Network["BITCOIN_CASH_TESTNET"] = "bch-testnet";
    Network["CARDANO_PREPROD"] = "cardano-preprod";
    Network["CELO_ALFAJORES"] = "celo-testnet";
    Network["CRONOS_TESTNET"] = "cro-testnet";
    Network["DOGECOIN_TESTNET"] = "doge-testnet";
    Network["ETHEREUM_GOERLI"] = "ethereum-goerli";
    Network["ETHEREUM_SEPOLIA"] = "ethereum-sepolia";
    Network["ETHEREUM_HOLESKY"] = "ethereum-holesky";
    Network["EOS_TESTNET"] = "eos-testnet";
    Network["FANTOM_TESTNET"] = "fantom-testnet";
    Network["FLARE_COSTON"] = "flare-coston";
    Network["FLARE_COSTON_2"] = "flare-coston2";
    Network["FLARE_SONGBIRD"] = "flare-songbird";
    Network["FLOW_TESTNET"] = "flow-testnet";
    Network["GNOSIS_TESTNET"] = "gno-testnet";
    Network["HAQQ_TESTNET"] = "haqq-testnet";
    Network["HARMONY_ONE_TESTNET_SHARD_0"] = "one-testnet-s0";
    Network["HORIZEN_EON_GOBI"] = "horizen-eon-gobi";
    Network["KLAYTN_BAOBAB"] = "klaytn-baobab";
    Network["KUCOIN_TESTNET"] = "kcs-testnet";
    Network["LITECOIN_TESTNET"] = "litecoin-testnet";
    Network["MULTIVERSX_TESTNET"] = "egld-testnet";
    Network["NEAR_TESTNET"] = "near-testnet";
    Network["OASIS_TESTNET"] = "oasis-testnet";
    Network["OPTIMISM_TESTNET"] = "optimism-testnet";
    Network["PALM_TESTNET"] = "palm-testnet";
    Network["POLYGON_MUMBAI"] = "polygon-mumbai";
    Network["POLKADOT_TESTNET"] = "dot-testnet";
    Network["RSK_TESTNET"] = "rsk-testnet";
    Network["SOLANA_DEVNET"] = "solana-devnet";
    Network["STELLAR_TESTNET"] = "stellar-testnet";
    Network["TEZOS_TESTNET"] = "tezos-testnet";
    Network["TRON_SHASTA"] = "tron-testnet";
    Network["VECHAIN_TESTNET"] = "vechain-testnet";
    Network["XDC_TESTNET"] = "xdc-testnet";
    Network["XRP_TESTNET"] = "ripple-testnet";
    Network["ZCASH_TESTNET"] = "zcash-testnet";
    Network["ZILLIQA_TESTNET"] = "zilliqa-testnet";
})(Network = exports.Network || (exports.Network = {}));
exports.EVM_BASED_NETWORKS = [
    Network.ETHEREUM,
    Network.ETHEREUM_SEPOLIA,
    Network.ETHEREUM_CLASSIC,
    Network.ETHEREUM_GOERLI,
    Network.ETHEREUM_HOLESKY,
    Network.AVALANCHE_C,
    Network.AVALANCHE_C_TESTNET,
    Network.POLYGON,
    Network.POLYGON_MUMBAI,
    Network.GNOSIS,
    Network.GNOSIS_TESTNET,
    Network.FANTOM,
    Network.FANTOM_TESTNET,
    Network.AURORA,
    Network.AURORA_TESTNET,
    Network.CELO,
    Network.CELO_ALFAJORES,
    Network.BINANCE_SMART_CHAIN_TESTNET,
    Network.VECHAIN,
    Network.VECHAIN_TESTNET,
    Network.XDC,
    Network.XDC_TESTNET,
    Network.PALM,
    Network.PALM_TESTNET,
    Network.CRONOS,
    Network.CRONOS_TESTNET,
    Network.KUCOIN,
    Network.KUCOIN_TESTNET,
    Network.OASIS,
    Network.OASIS_TESTNET,
    Network.OPTIMISM,
    Network.OPTIMISM_TESTNET,
    Network.HARMONY_ONE_SHARD_0,
    Network.HARMONY_ONE_TESTNET_SHARD_0,
    Network.KLAYTN,
    Network.KLAYTN_BAOBAB,
    Network.FLARE_COSTON,
    Network.FLARE_COSTON_2,
    Network.FLARE,
    Network.FLARE_SONGBIRD,
    Network.HAQQ,
    Network.HAQQ_TESTNET,
    Network.ARBITRUM_NOVA,
    Network.ARBITRUM_NOVA_TESTNET,
    Network.ARBITRUM_ONE,
    Network.BINANCE_SMART_CHAIN,
    Network.HORIZEN_EON,
    Network.HORIZEN_EON_GOBI,
    Network.CHILIZ,
];
exports.UTXO_BASED_NETWORKS = [
    Network.BITCOIN,
    Network.BITCOIN_TESTNET,
    Network.BITCOIN_CASH,
    Network.BITCOIN_CASH_TESTNET,
    Network.LITECOIN,
    Network.LITECOIN_TESTNET,
    Network.ZCASH,
    Network.ZCASH_TESTNET,
    Network.DOGECOIN,
    Network.DOGECOIN_TESTNET,
];
exports.UTXO_LOAD_BALANCER_ESTIMATE_FEE_NETWORKS = [
    Network.BITCOIN_CASH,
];
exports.UTXO_ESTIMATE_FEE_NETWORKS = [
    Network.BITCOIN_CASH_TESTNET,
];
exports.DATA_API_UTXO_NETWORKS = [
    Network.BITCOIN,
    Network.BITCOIN_TESTNET,
    Network.LITECOIN,
    Network.LITECOIN_TESTNET,
    Network.CARDANO,
    Network.CARDANO_PREPROD,
    Network.DOGECOIN,
    Network.DOGECOIN_TESTNET,
];
exports.DATA_API_EVM_NETWORKS = [
    Network.ETHEREUM,
    Network.ETHEREUM_SEPOLIA,
    Network.ETHEREUM_GOERLI,
    Network.POLYGON,
    Network.POLYGON_MUMBAI,
    Network.BINANCE_SMART_CHAIN,
    Network.BINANCE_SMART_CHAIN_TESTNET,
    Network.CELO,
    Network.CELO_ALFAJORES,
    Network.HORIZEN_EON,
];
exports.DATA_API_NETWORKS = [...exports.DATA_API_EVM_NETWORKS, Network.TEZOS];
exports.UTXO_LOAD_BALANCER_NETWORKS = [
    Network.BITCOIN,
    Network.BITCOIN_TESTNET,
    Network.LITECOIN,
    Network.LITECOIN_TESTNET,
    Network.DOGECOIN,
    Network.DOGECOIN_TESTNET,
    Network.ZCASH,
    Network.BITCOIN_CASH,
];
exports.EVM_LOAD_BALANCER_NETWORKS = [
    Network.FLARE,
    Network.FLARE_COSTON,
    Network.FLARE_COSTON_2,
    Network.FLARE_SONGBIRD,
    Network.HAQQ,
    Network.HAQQ_TESTNET,
    Network.ETHEREUM,
    Network.ETHEREUM_SEPOLIA,
    Network.ETHEREUM_HOLESKY,
    Network.POLYGON,
    Network.POLYGON_MUMBAI,
    Network.OPTIMISM,
    Network.OPTIMISM_TESTNET,
    Network.HORIZEN_EON,
    Network.HORIZEN_EON_GOBI,
    Network.ARBITRUM_ONE,
    Network.BINANCE_SMART_CHAIN,
    Network.CHILIZ,
    Network.ETHEREUM_CLASSIC,
    Network.AVALANCHE_C,
    Network.CELO,
    Network.CELO_ALFAJORES,
];
exports.TRON_LOAD_BALANCER_NETWORKS = [Network.TRON];
exports.EOS_LOAD_BALANCER_NETWORKS = [Network.EOS];
exports.XRP_LOAD_BALANCER_NETWORKS = [Network.XRP, Network.XRP_TESTNET];
exports.NATIVE_EVM_LOAD_BALANCER_NETWORKS = [Network.KLAYTN, Network.KLAYTN_BAOBAB];
exports.SOLANA_NETWORKS = [Network.SOLANA, Network.SOLANA_DEVNET];
exports.BNB_LOAD_BALANCER_NETWORKS = [Network.BNB];
exports.LOAD_BALANCER_NETWORKS = [
    ...exports.UTXO_LOAD_BALANCER_NETWORKS,
    ...exports.EVM_LOAD_BALANCER_NETWORKS,
    ...exports.TRON_LOAD_BALANCER_NETWORKS,
    ...exports.EOS_LOAD_BALANCER_NETWORKS,
    ...exports.XRP_LOAD_BALANCER_NETWORKS,
    ...exports.NATIVE_EVM_LOAD_BALANCER_NETWORKS,
    ...exports.SOLANA_NETWORKS,
    ...exports.BNB_LOAD_BALANCER_NETWORKS,
];
exports.EVM_ARCHIVE_NON_ARCHIVE_LOAD_BALANCER_NETWORKS = [
    Network.ETHEREUM,
    Network.ETHEREUM_SEPOLIA,
    Network.HAQQ,
    Network.HAQQ_TESTNET,
    Network.POLYGON,
    Network.POLYGON_MUMBAI,
    Network.CHILIZ,
];
exports.EVM_ARCHIVE_NON_ARCHIVE_BEACON_LOAD_BALANCER_NETWORKS = [
    Network.ETHEREUM,
    Network.ETHEREUM_SEPOLIA,
    Network.ETHEREUM_HOLESKY,
];
exports.TRON_NETWORKS = [Network.TRON, Network.TRON_SHASTA];
exports.EOS_NETWORKS = [Network.EOS, Network.EOS_TESTNET];
const isEvmBasedNetwork = (network) => exports.EVM_BASED_NETWORKS.includes(network);
exports.isEvmBasedNetwork = isEvmBasedNetwork;
const isUtxoBasedNetwork = (network) => exports.UTXO_BASED_NETWORKS.includes(network);
exports.isUtxoBasedNetwork = isUtxoBasedNetwork;
const isUtxoLoadBalancerEstimateFeeNetwork = (network) => exports.UTXO_LOAD_BALANCER_ESTIMATE_FEE_NETWORKS.includes(network);
exports.isUtxoLoadBalancerEstimateFeeNetwork = isUtxoLoadBalancerEstimateFeeNetwork;
const isUtxoEstimateFeeNetwork = (network) => exports.UTXO_ESTIMATE_FEE_NETWORKS.includes(network);
exports.isUtxoEstimateFeeNetwork = isUtxoEstimateFeeNetwork;
const isUtxoLoadBalancerNetwork = (network) => exports.UTXO_LOAD_BALANCER_NETWORKS.includes(network);
exports.isUtxoLoadBalancerNetwork = isUtxoLoadBalancerNetwork;
const isXrpNetwork = (network) => [Network.XRP, Network.XRP_TESTNET].includes(network);
exports.isXrpNetwork = isXrpNetwork;
const isDataApiEvmEnabledNetwork = (network) => exports.DATA_API_EVM_NETWORKS.includes(network);
exports.isDataApiEvmEnabledNetwork = isDataApiEvmEnabledNetwork;
const isDataApiEnabledNetwork = (network) => exports.DATA_API_NETWORKS.includes(network);
exports.isDataApiEnabledNetwork = isDataApiEnabledNetwork;
const isDataApiUtxoEnabledNetwork = (network) => exports.DATA_API_UTXO_NETWORKS.includes(network);
exports.isDataApiUtxoEnabledNetwork = isDataApiUtxoEnabledNetwork;
const isSolanaNetwork = (network) => exports.SOLANA_NETWORKS.includes(network);
exports.isSolanaNetwork = isSolanaNetwork;
const isTronNetwork = (network) => exports.TRON_NETWORKS.includes(network);
exports.isTronNetwork = isTronNetwork;
const isEosNetwork = (network) => exports.EOS_NETWORKS.includes(network);
exports.isEosNetwork = isEosNetwork;
const isLoadBalancerNetwork = (network) => exports.LOAD_BALANCER_NETWORKS.includes(network);
exports.isLoadBalancerNetwork = isLoadBalancerNetwork;
const isEvmLoadBalancerNetwork = (network) => exports.EVM_LOAD_BALANCER_NETWORKS.includes(network);
exports.isEvmLoadBalancerNetwork = isEvmLoadBalancerNetwork;
const isEvmArchiveNonArchiveLoadBalancerNetwork = (network) => exports.EVM_ARCHIVE_NON_ARCHIVE_LOAD_BALANCER_NETWORKS.includes(network);
exports.isEvmArchiveNonArchiveLoadBalancerNetwork = isEvmArchiveNonArchiveLoadBalancerNetwork;
const isEvmArchiveNonArchiveBeaconLoadBalancerNetwork = (network) => exports.EVM_ARCHIVE_NON_ARCHIVE_BEACON_LOAD_BALANCER_NETWORKS.includes(network);
exports.isEvmArchiveNonArchiveBeaconLoadBalancerNetwork = isEvmArchiveNonArchiveBeaconLoadBalancerNetwork;
const isTronLoadBalancerNetwork = (network) => exports.TRON_LOAD_BALANCER_NETWORKS.includes(network);
exports.isTronLoadBalancerNetwork = isTronLoadBalancerNetwork;
const isEosLoadBalancerNetwork = (network) => exports.EOS_LOAD_BALANCER_NETWORKS.includes(network);
exports.isEosLoadBalancerNetwork = isEosLoadBalancerNetwork;
const isXrpLoadBalancerNetwork = (network) => exports.XRP_LOAD_BALANCER_NETWORKS.includes(network);
exports.isXrpLoadBalancerNetwork = isXrpLoadBalancerNetwork;
const isNativeEvmLoadBalancerNetwork = (network) => exports.NATIVE_EVM_LOAD_BALANCER_NETWORKS.includes(network);
exports.isNativeEvmLoadBalancerNetwork = isNativeEvmLoadBalancerNetwork;
const isBnbLoadBalancerNetwork = (network) => exports.BNB_LOAD_BALANCER_NETWORKS.includes(network);
exports.isBnbLoadBalancerNetwork = isBnbLoadBalancerNetwork;
const isSameGetBlockNetwork = (network) => (0, exports.isUtxoBasedNetwork)(network) ||
    (0, exports.isEvmBasedNetwork)(network) ||
    (0, exports.isTronNetwork)(network) ||
    (0, exports.isSolanaNetwork)(network);
exports.isSameGetBlockNetwork = isSameGetBlockNetwork;
var MappedNetwork;
(function (MappedNetwork) {
    MappedNetwork["HORIZEN_EON"] = "horizen-eon-mainnet";
    MappedNetwork["DOGECOIN_MAINNET"] = "dogecoin-mainnet";
    MappedNetwork["DOGECOIN_TESTNET"] = "dogecoin-testnet";
})(MappedNetwork = exports.MappedNetwork || (exports.MappedNetwork = {}));
exports.MAPPED_NETWORK = {
    [Network.HORIZEN_EON]: MappedNetwork.HORIZEN_EON,
    [Network.DOGECOIN]: MappedNetwork.DOGECOIN_MAINNET,
    [Network.DOGECOIN_TESTNET]: MappedNetwork.DOGECOIN_TESTNET,
};
exports.NATIVE_PREFIX_MAPPING = {
    [Network.KLAYTN]: 'klay_',
    [Network.KLAYTN_BAOBAB]: 'klay_',
};
//# sourceMappingURL=Network.js.map