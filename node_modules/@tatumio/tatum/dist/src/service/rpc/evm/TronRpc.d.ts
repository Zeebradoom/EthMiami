import { TatumConnector } from '../../../connector/tatum.connector';
import { JsonRpcCall, JsonRpcResponse } from '../../../dto';
import { PostI } from '../../../dto/PostI';
import { TatumConfig } from '../../tatum';
import { GenericRpc } from '../generic/GenericRpc';
import { AbstractTronRpc } from './AbstractTronRpc';
export declare class TronRpc extends AbstractTronRpc {
    readonly genericRpc: GenericRpc;
    protected readonly config: TatumConfig;
    protected readonly connector: TatumConnector;
    constructor(id: string);
    protected rpcCall<T>(method: string, params?: unknown[]): Promise<T>;
    rawRpcCall<T>(body: JsonRpcCall): Promise<T>;
    rawBatchRpcCall(body: JsonRpcCall[]): Promise<JsonRpcResponse<any>[] | JsonRpcResponse<any>>;
    protected post<T>(post: PostI): Promise<T>;
    destroy(): void;
    getRpcNodeUrl(): string;
}
