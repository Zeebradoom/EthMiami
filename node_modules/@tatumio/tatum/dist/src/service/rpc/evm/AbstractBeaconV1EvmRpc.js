"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AbstractBeaconV1EvmRpc = void 0;
/* eslint-disable @typescript-eslint/no-explicit-any */
const typedi_1 = require("typedi");
const util_1 = require("../../../util");
let AbstractBeaconV1EvmRpc = class AbstractBeaconV1EvmRpc {
    getBlockAttestations({ blockId, ...rest }) {
        const path = util_1.Utils.addQueryParams(`${util_1.Constant.BEACON_PREFIX}/blocks/${blockId}/attestations`, rest);
        return this.get({ path });
    }
    getBlockHeader({ blockId, ...rest }) {
        const path = util_1.Utils.addQueryParams(`${util_1.Constant.BEACON_PREFIX}/blocks/${blockId}/header`, rest);
        return this.get({ path });
    }
    getBlockHeaders({ slot, parentRoot, ...rest } = {}) {
        const queryParams = {
            ...(slot ? { slot } : {}),
            ...(parentRoot ? { parentRoot } : {}),
            ...rest
        };
        const path = util_1.Utils.addQueryParams(`${util_1.Constant.BEACON_PREFIX}/headers`, queryParams);
        return this.get({ path });
    }
    getBlockRoot({ blockId, ...rest }) {
        const path = util_1.Utils.addQueryParams(`${util_1.Constant.BEACON_PREFIX}/blocks/${blockId}/root`, rest);
        return this.get({ path });
    }
    getGenesis() {
        const path = util_1.Utils.addQueryParams(`${util_1.Constant.BEACON_PREFIX}/genesis`);
        return this.get({ path });
    }
    getStateCommittees({ stateId, ...rest }) {
        const path = util_1.Utils.addQueryParams(`${util_1.Constant.BEACON_PREFIX}/states/${stateId}/committees`, rest);
        return this.get({ path });
    }
    getStateFinalityCheckpoints({ stateId, ...rest }) {
        const path = util_1.Utils.addQueryParams(`${util_1.Constant.BEACON_PREFIX}/states/${stateId}/finality_checkpoints`, rest);
        return this.get({ path });
    }
    getStateFork({ stateId, ...rest }) {
        const path = util_1.Utils.addQueryParams(`${util_1.Constant.BEACON_PREFIX}/states/${stateId}/fork`, rest);
        return this.get({ path });
    }
    getStateRoot({ stateId, ...rest }) {
        const path = util_1.Utils.addQueryParams(`${util_1.Constant.BEACON_PREFIX}/states/${stateId}/root`, rest);
        return this.get({ path });
    }
    getStateSyncCommittees({ stateId, ...rest }) {
        const path = util_1.Utils.addQueryParams(`${util_1.Constant.BEACON_PREFIX}/states/${stateId}/sync_committees`, rest);
        return this.get({ path });
    }
    getStateValidator({ stateId, validatorId, ...rest }) {
        const path = util_1.Utils.addQueryParams(`${util_1.Constant.BEACON_PREFIX}/states/${stateId}/validators/${validatorId}`, rest);
        return this.get({ path });
    }
    getStateValidatorBalances({ stateId, ...rest }) {
        const path = util_1.Utils.addQueryParams(`${util_1.Constant.BEACON_PREFIX}/states/${stateId}/validator_balances`, rest);
        return this.get({ path });
    }
    getStateValidators({ stateId, ...rest }) {
        const path = util_1.Utils.addQueryParams(`${util_1.Constant.BEACON_PREFIX}/states/${stateId}/validators`, rest);
        return this.get({ path });
    }
};
AbstractBeaconV1EvmRpc = __decorate([
    (0, typedi_1.Service)()
], AbstractBeaconV1EvmRpc);
exports.AbstractBeaconV1EvmRpc = AbstractBeaconV1EvmRpc;
//# sourceMappingURL=AbstractBeaconV1EvmRpc.js.map