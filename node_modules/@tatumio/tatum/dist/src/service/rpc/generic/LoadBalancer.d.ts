import { TatumConnector } from '../../../connector/tatum.connector';
import { JsonRpcCall, JsonRpcResponse } from '../../../dto';
import { PostI } from '../../../dto/PostI';
import { AbstractRpcInterface } from '../../../dto/rpc/AbstractJsonRpcInterface';
import { RpcNodeType } from '../../tatum';
import { GetI } from '../../../dto/GetI';
declare enum RequestType {
    RPC = "RPC",
    POST = "POST",
    GET = "GET",
    BATCH = "BATCH"
}
interface HandleFailedRpcCallParams {
    rpcCall: JsonRpcCall | JsonRpcCall[] | PostI | GetI;
    e: unknown;
    nodeType: RpcNodeType;
    requestType: RequestType;
}
export declare class LoadBalancer implements AbstractRpcInterface {
    private readonly id;
    protected readonly connector: TatumConnector;
    private rpcUrls;
    private activeUrl;
    private timeout;
    private network;
    constructor(id: string);
    init(): Promise<void>;
    destroy(): void;
    private initCustomNodes;
    private checkStatuses;
    private checkStatus;
    private static getFastestServer;
    getActiveArchiveUrlWithFallback(): {
        url: string;
        type: RpcNodeType;
    };
    getActiveNormalUrlWithFallback(): {
        url: string;
        type: RpcNodeType;
    };
    getActiveUrl(nodeType: RpcNodeType): {
        url: string;
        type: RpcNodeType;
    };
    private getActiveIndex;
    private checkSSRF;
    private initRemoteHosts;
    private initRemoteHostsUrls;
    initRemoteHostsFromResponse(response: Response, nodeType: RpcNodeType): Promise<void>;
    handleFailedRpcCall({ rpcCall, e, nodeType, requestType }: HandleFailedRpcCallParams): Promise<void>;
    rawRpcCall(rpcCall: JsonRpcCall, archive?: boolean): Promise<JsonRpcResponse<any>>;
    rawBatchRpcCall(rpcCall: JsonRpcCall[]): Promise<JsonRpcResponse<any>[] | JsonRpcResponse<any>>;
    post<T>({ path, body, basePath }: PostI): Promise<T>;
    get<T>({ path, basePath }: GetI): Promise<T>;
    getRpcNodeUrl(): string;
}
export {};
