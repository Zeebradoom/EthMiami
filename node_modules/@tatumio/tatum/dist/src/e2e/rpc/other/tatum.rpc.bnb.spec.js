"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const process = __importStar(require("process"));
const service_1 = require("../../../service");
const e2e_util_1 = require("../../e2e.util");
const getBnbRpc = async () => await service_1.TatumSDK.init({
    network: service_1.Network.BNB,
    apiKey: {
        v4: process.env.V4_API_KEY_MAINNET
    },
    verbose: e2e_util_1.e2eUtil.isVerbose,
});
// Testnet is not available
describe('Bnb', () => {
    describe('mainnet', () => {
        it('block', async () => {
            const tatum = await getBnbRpc();
            const { result } = await tatum.rpc.block();
            await tatum.destroy();
            expect(result).toBeDefined();
        });
        it('abciInfo', async () => {
            const tatum = await getBnbRpc();
            const { result } = await tatum.rpc.abciInfo();
            await tatum.destroy();
            expect(result).toBeDefined();
        });
        it('blockchain', async () => {
            const tatum = await getBnbRpc();
            const { result } = await tatum.rpc.blockchain();
            await tatum.destroy();
            expect(result).toBeDefined();
        });
        it('health', async () => {
            const tatum = await getBnbRpc();
            const { result } = await tatum.rpc.health();
            await tatum.destroy();
            expect(result).toBeDefined();
        });
        it('genesis', async () => {
            const tatum = await getBnbRpc();
            const { result } = await tatum.rpc.genesis();
            await tatum.destroy();
            expect(result).toBeDefined();
        });
        it('validators', async () => {
            const tatum = await getBnbRpc();
            const { result } = await tatum.rpc.validators();
            await tatum.destroy();
            expect(result).toBeDefined();
        });
        it('unconfirmedTxs', async () => {
            const tatum = await getBnbRpc();
            const { result } = await tatum.rpc.unconfirmedTxs({ limit: '1' });
            await tatum.destroy();
            expect(result).toBeDefined();
        });
        it('raw rpc call', async () => {
            const tatum = await getBnbRpc();
            const { result } = await tatum.rpc.rawRpcCall({ method: 'block', id: 1, jsonrpc: '2.0', params: {} });
            await tatum.destroy();
            expect(result).toBeDefined();
        });
    });
});
//# sourceMappingURL=tatum.rpc.bnb.spec.js.map