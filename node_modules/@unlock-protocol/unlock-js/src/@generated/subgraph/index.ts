import { GraphQLClient } from 'graphql-request';
import { GraphQLClientRequestHeaders } from 'graphql-request/build/cjs/types';
import gql from 'graphql-tag';
export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
export type MakeEmpty<T extends { [key: string]: unknown }, K extends keyof T> = { [_ in K]?: never };
export type Incremental<T> = T | { [P in keyof T]?: P extends ' $fragmentName' | '__typename' ? T[P] : never };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: { input: string; output: string; }
  String: { input: string; output: string; }
  Boolean: { input: boolean; output: boolean; }
  Int: { input: number; output: number; }
  Float: { input: number; output: number; }
  BigDecimal: { input: any; output: any; }
  BigInt: { input: any; output: any; }
  Bytes: { input: any; output: any; }
  Int8: { input: any; output: any; }
};

export type BlockChangedFilter = {
  number_gte: Scalars['Int']['input'];
};

export type Block_Height = {
  hash?: InputMaybe<Scalars['Bytes']['input']>;
  number?: InputMaybe<Scalars['Int']['input']>;
  number_gte?: InputMaybe<Scalars['Int']['input']>;
};

export type Key = {
  __typename?: 'Key';
  /** Invoked by a Lock manager to expire the user's key and perform a refund and cancellation of the key */
  cancelled?: Maybe<Scalars['Boolean']['output']>;
  /** Timestamp of the block in which the key was created */
  createdAt: Scalars['BigInt']['output'];
  /** Block key was created */
  createdAtBlock: Scalars['BigInt']['output'];
  /** Time the key expires */
  expiration: Scalars['BigInt']['output'];
  /** Unique identifier for a key (combination of lock address and token id) */
  id: Scalars['ID']['output'];
  /** In the Unlock ecosystem, a “Lock” is a smart contract that creates (or “mints”) NFTs */
  lock: Lock;
  /** An assigned title set on an Unlock key which gives a specific wallet address authorization to transfer, share or cancel */
  manager?: Maybe<Scalars['Bytes']['output']>;
  /** The address of the key owner */
  owner: Scalars['Bytes']['output'];
  /** TokenId for a given key */
  tokenId: Scalars['BigInt']['output'];
  /** The tokenURI on an NFT is a unique identifier */
  tokenURI?: Maybe<Scalars['String']['output']>;
  /** list of transaction hashes for purchase/extensions of a specific token */
  transactionsHash?: Maybe<Array<Scalars['String']['output']>>;
};

export type Key_Filter = {
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<Key_Filter>>>;
  cancelled?: InputMaybe<Scalars['Boolean']['input']>;
  cancelled_in?: InputMaybe<Array<Scalars['Boolean']['input']>>;
  cancelled_not?: InputMaybe<Scalars['Boolean']['input']>;
  cancelled_not_in?: InputMaybe<Array<Scalars['Boolean']['input']>>;
  createdAt?: InputMaybe<Scalars['BigInt']['input']>;
  createdAtBlock?: InputMaybe<Scalars['BigInt']['input']>;
  createdAtBlock_gt?: InputMaybe<Scalars['BigInt']['input']>;
  createdAtBlock_gte?: InputMaybe<Scalars['BigInt']['input']>;
  createdAtBlock_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  createdAtBlock_lt?: InputMaybe<Scalars['BigInt']['input']>;
  createdAtBlock_lte?: InputMaybe<Scalars['BigInt']['input']>;
  createdAtBlock_not?: InputMaybe<Scalars['BigInt']['input']>;
  createdAtBlock_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  createdAt_gt?: InputMaybe<Scalars['BigInt']['input']>;
  createdAt_gte?: InputMaybe<Scalars['BigInt']['input']>;
  createdAt_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  createdAt_lt?: InputMaybe<Scalars['BigInt']['input']>;
  createdAt_lte?: InputMaybe<Scalars['BigInt']['input']>;
  createdAt_not?: InputMaybe<Scalars['BigInt']['input']>;
  createdAt_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  expiration?: InputMaybe<Scalars['BigInt']['input']>;
  expiration_gt?: InputMaybe<Scalars['BigInt']['input']>;
  expiration_gte?: InputMaybe<Scalars['BigInt']['input']>;
  expiration_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  expiration_lt?: InputMaybe<Scalars['BigInt']['input']>;
  expiration_lte?: InputMaybe<Scalars['BigInt']['input']>;
  expiration_not?: InputMaybe<Scalars['BigInt']['input']>;
  expiration_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  id?: InputMaybe<Scalars['ID']['input']>;
  id_gt?: InputMaybe<Scalars['ID']['input']>;
  id_gte?: InputMaybe<Scalars['ID']['input']>;
  id_in?: InputMaybe<Array<Scalars['ID']['input']>>;
  id_lt?: InputMaybe<Scalars['ID']['input']>;
  id_lte?: InputMaybe<Scalars['ID']['input']>;
  id_not?: InputMaybe<Scalars['ID']['input']>;
  id_not_in?: InputMaybe<Array<Scalars['ID']['input']>>;
  lock?: InputMaybe<Scalars['String']['input']>;
  lock_?: InputMaybe<Lock_Filter>;
  lock_contains?: InputMaybe<Scalars['String']['input']>;
  lock_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  lock_ends_with?: InputMaybe<Scalars['String']['input']>;
  lock_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  lock_gt?: InputMaybe<Scalars['String']['input']>;
  lock_gte?: InputMaybe<Scalars['String']['input']>;
  lock_in?: InputMaybe<Array<Scalars['String']['input']>>;
  lock_lt?: InputMaybe<Scalars['String']['input']>;
  lock_lte?: InputMaybe<Scalars['String']['input']>;
  lock_not?: InputMaybe<Scalars['String']['input']>;
  lock_not_contains?: InputMaybe<Scalars['String']['input']>;
  lock_not_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  lock_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  lock_not_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  lock_not_in?: InputMaybe<Array<Scalars['String']['input']>>;
  lock_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  lock_not_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  lock_starts_with?: InputMaybe<Scalars['String']['input']>;
  lock_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  manager?: InputMaybe<Scalars['Bytes']['input']>;
  manager_contains?: InputMaybe<Scalars['Bytes']['input']>;
  manager_gt?: InputMaybe<Scalars['Bytes']['input']>;
  manager_gte?: InputMaybe<Scalars['Bytes']['input']>;
  manager_in?: InputMaybe<Array<Scalars['Bytes']['input']>>;
  manager_lt?: InputMaybe<Scalars['Bytes']['input']>;
  manager_lte?: InputMaybe<Scalars['Bytes']['input']>;
  manager_not?: InputMaybe<Scalars['Bytes']['input']>;
  manager_not_contains?: InputMaybe<Scalars['Bytes']['input']>;
  manager_not_in?: InputMaybe<Array<Scalars['Bytes']['input']>>;
  or?: InputMaybe<Array<InputMaybe<Key_Filter>>>;
  owner?: InputMaybe<Scalars['Bytes']['input']>;
  owner_contains?: InputMaybe<Scalars['Bytes']['input']>;
  owner_gt?: InputMaybe<Scalars['Bytes']['input']>;
  owner_gte?: InputMaybe<Scalars['Bytes']['input']>;
  owner_in?: InputMaybe<Array<Scalars['Bytes']['input']>>;
  owner_lt?: InputMaybe<Scalars['Bytes']['input']>;
  owner_lte?: InputMaybe<Scalars['Bytes']['input']>;
  owner_not?: InputMaybe<Scalars['Bytes']['input']>;
  owner_not_contains?: InputMaybe<Scalars['Bytes']['input']>;
  owner_not_in?: InputMaybe<Array<Scalars['Bytes']['input']>>;
  tokenId?: InputMaybe<Scalars['BigInt']['input']>;
  tokenId_gt?: InputMaybe<Scalars['BigInt']['input']>;
  tokenId_gte?: InputMaybe<Scalars['BigInt']['input']>;
  tokenId_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  tokenId_lt?: InputMaybe<Scalars['BigInt']['input']>;
  tokenId_lte?: InputMaybe<Scalars['BigInt']['input']>;
  tokenId_not?: InputMaybe<Scalars['BigInt']['input']>;
  tokenId_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  tokenURI?: InputMaybe<Scalars['String']['input']>;
  tokenURI_contains?: InputMaybe<Scalars['String']['input']>;
  tokenURI_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  tokenURI_ends_with?: InputMaybe<Scalars['String']['input']>;
  tokenURI_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  tokenURI_gt?: InputMaybe<Scalars['String']['input']>;
  tokenURI_gte?: InputMaybe<Scalars['String']['input']>;
  tokenURI_in?: InputMaybe<Array<Scalars['String']['input']>>;
  tokenURI_lt?: InputMaybe<Scalars['String']['input']>;
  tokenURI_lte?: InputMaybe<Scalars['String']['input']>;
  tokenURI_not?: InputMaybe<Scalars['String']['input']>;
  tokenURI_not_contains?: InputMaybe<Scalars['String']['input']>;
  tokenURI_not_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  tokenURI_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  tokenURI_not_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  tokenURI_not_in?: InputMaybe<Array<Scalars['String']['input']>>;
  tokenURI_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  tokenURI_not_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  tokenURI_starts_with?: InputMaybe<Scalars['String']['input']>;
  tokenURI_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  transactionsHash?: InputMaybe<Array<Scalars['String']['input']>>;
  transactionsHash_contains?: InputMaybe<Array<Scalars['String']['input']>>;
  transactionsHash_contains_nocase?: InputMaybe<Array<Scalars['String']['input']>>;
  transactionsHash_not?: InputMaybe<Array<Scalars['String']['input']>>;
  transactionsHash_not_contains?: InputMaybe<Array<Scalars['String']['input']>>;
  transactionsHash_not_contains_nocase?: InputMaybe<Array<Scalars['String']['input']>>;
};

export enum Key_OrderBy {
  Cancelled = 'cancelled',
  CreatedAt = 'createdAt',
  CreatedAtBlock = 'createdAtBlock',
  Expiration = 'expiration',
  Id = 'id',
  Lock = 'lock',
  LockAddress = 'lock__address',
  LockCreatedAtBlock = 'lock__createdAtBlock',
  LockDeployer = 'lock__deployer',
  LockExpirationDuration = 'lock__expirationDuration',
  LockId = 'lock__id',
  LockLastKeyMintedAt = 'lock__lastKeyMintedAt',
  LockMaxKeysPerAddress = 'lock__maxKeysPerAddress',
  LockMaxNumberOfKeys = 'lock__maxNumberOfKeys',
  LockName = 'lock__name',
  LockNumberOfReceipts = 'lock__numberOfReceipts',
  LockPrice = 'lock__price',
  LockSymbol = 'lock__symbol',
  LockTokenAddress = 'lock__tokenAddress',
  LockTotalKeys = 'lock__totalKeys',
  LockVersion = 'lock__version',
  Manager = 'manager',
  Owner = 'owner',
  TokenId = 'tokenId',
  TokenUri = 'tokenURI',
  TransactionsHash = 'transactionsHash'
}

export type Lock = {
  __typename?: 'Lock';
  /** Address of the lock */
  address: Scalars['Bytes']['output'];
  /** Which block the lock was created */
  createdAtBlock?: Maybe<Scalars['BigInt']['output']>;
  /** Address of the lock deployer */
  deployer: Scalars['Bytes']['output'];
  /** Duration is set the on the lock when you deploy and the expiration which is set on each key when they are minted */
  expirationDuration?: Maybe<Scalars['BigInt']['output']>;
  /** Unique ID for the Lock object (uses the lock address) */
  id: Scalars['ID']['output'];
  /** Refer to key entity */
  keys?: Maybe<Array<Key>>;
  /** The timestamp of the block in which the last key was minted */
  lastKeyMintedAt?: Maybe<Scalars['BigInt']['output']>;
  /** An assigned role set on a Lock contract which gives the highest level of permissions to the wallet address set to that role */
  lockManagers: Array<Scalars['Bytes']['output']>;
  /** The maximum number of keys allowed for a single address */
  maxKeysPerAddress?: Maybe<Scalars['BigInt']['output']>;
  /** Maximum number of keys for sale */
  maxNumberOfKeys?: Maybe<Scalars['BigInt']['output']>;
  /** A descriptive name for a collection of NFTs in this contract */
  name?: Maybe<Scalars['String']['output']>;
  /** Total number of receipts of lock */
  numberOfReceipts: Scalars['BigInt']['output'];
  /** Price of the keys sold by the lock */
  price: Scalars['BigInt']['output'];
  /** Referrers fees set per custom address */
  referrerFees: Array<ReferrerFee>;
  /** Token symbol */
  symbol?: Maybe<Scalars['String']['output']>;
  /** Address of the 'currency' ERC20 contract if the keys are priced using an ERC20 */
  tokenAddress: Scalars['Bytes']['output'];
  /** Number of keys minted (expired or not) */
  totalKeys: Scalars['BigInt']['output'];
  /** Unlock Protocol version of a minting contract */
  version: Scalars['BigInt']['output'];
};


export type LockKeysArgs = {
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Key_OrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<Key_Filter>;
};


export type LockReferrerFeesArgs = {
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<ReferrerFee_OrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<ReferrerFee_Filter>;
};

export type LockStats = {
  __typename?: 'LockStats';
  /** Transaction Hash */
  id: Scalars['ID']['output'];
  /** Total keys sold */
  totalKeysSold: Scalars['BigInt']['output'];
  /** Total locks deployed */
  totalLocksDeployed: Scalars['BigInt']['output'];
};

export type LockStats_Filter = {
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<LockStats_Filter>>>;
  id?: InputMaybe<Scalars['ID']['input']>;
  id_gt?: InputMaybe<Scalars['ID']['input']>;
  id_gte?: InputMaybe<Scalars['ID']['input']>;
  id_in?: InputMaybe<Array<Scalars['ID']['input']>>;
  id_lt?: InputMaybe<Scalars['ID']['input']>;
  id_lte?: InputMaybe<Scalars['ID']['input']>;
  id_not?: InputMaybe<Scalars['ID']['input']>;
  id_not_in?: InputMaybe<Array<Scalars['ID']['input']>>;
  or?: InputMaybe<Array<InputMaybe<LockStats_Filter>>>;
  totalKeysSold?: InputMaybe<Scalars['BigInt']['input']>;
  totalKeysSold_gt?: InputMaybe<Scalars['BigInt']['input']>;
  totalKeysSold_gte?: InputMaybe<Scalars['BigInt']['input']>;
  totalKeysSold_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  totalKeysSold_lt?: InputMaybe<Scalars['BigInt']['input']>;
  totalKeysSold_lte?: InputMaybe<Scalars['BigInt']['input']>;
  totalKeysSold_not?: InputMaybe<Scalars['BigInt']['input']>;
  totalKeysSold_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  totalLocksDeployed?: InputMaybe<Scalars['BigInt']['input']>;
  totalLocksDeployed_gt?: InputMaybe<Scalars['BigInt']['input']>;
  totalLocksDeployed_gte?: InputMaybe<Scalars['BigInt']['input']>;
  totalLocksDeployed_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  totalLocksDeployed_lt?: InputMaybe<Scalars['BigInt']['input']>;
  totalLocksDeployed_lte?: InputMaybe<Scalars['BigInt']['input']>;
  totalLocksDeployed_not?: InputMaybe<Scalars['BigInt']['input']>;
  totalLocksDeployed_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
};

export enum LockStats_OrderBy {
  Id = 'id',
  TotalKeysSold = 'totalKeysSold',
  TotalLocksDeployed = 'totalLocksDeployed'
}

export type Lock_Filter = {
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<BlockChangedFilter>;
  address?: InputMaybe<Scalars['Bytes']['input']>;
  address_contains?: InputMaybe<Scalars['Bytes']['input']>;
  address_gt?: InputMaybe<Scalars['Bytes']['input']>;
  address_gte?: InputMaybe<Scalars['Bytes']['input']>;
  address_in?: InputMaybe<Array<Scalars['Bytes']['input']>>;
  address_lt?: InputMaybe<Scalars['Bytes']['input']>;
  address_lte?: InputMaybe<Scalars['Bytes']['input']>;
  address_not?: InputMaybe<Scalars['Bytes']['input']>;
  address_not_contains?: InputMaybe<Scalars['Bytes']['input']>;
  address_not_in?: InputMaybe<Array<Scalars['Bytes']['input']>>;
  and?: InputMaybe<Array<InputMaybe<Lock_Filter>>>;
  createdAtBlock?: InputMaybe<Scalars['BigInt']['input']>;
  createdAtBlock_gt?: InputMaybe<Scalars['BigInt']['input']>;
  createdAtBlock_gte?: InputMaybe<Scalars['BigInt']['input']>;
  createdAtBlock_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  createdAtBlock_lt?: InputMaybe<Scalars['BigInt']['input']>;
  createdAtBlock_lte?: InputMaybe<Scalars['BigInt']['input']>;
  createdAtBlock_not?: InputMaybe<Scalars['BigInt']['input']>;
  createdAtBlock_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  deployer?: InputMaybe<Scalars['Bytes']['input']>;
  deployer_contains?: InputMaybe<Scalars['Bytes']['input']>;
  deployer_gt?: InputMaybe<Scalars['Bytes']['input']>;
  deployer_gte?: InputMaybe<Scalars['Bytes']['input']>;
  deployer_in?: InputMaybe<Array<Scalars['Bytes']['input']>>;
  deployer_lt?: InputMaybe<Scalars['Bytes']['input']>;
  deployer_lte?: InputMaybe<Scalars['Bytes']['input']>;
  deployer_not?: InputMaybe<Scalars['Bytes']['input']>;
  deployer_not_contains?: InputMaybe<Scalars['Bytes']['input']>;
  deployer_not_in?: InputMaybe<Array<Scalars['Bytes']['input']>>;
  expirationDuration?: InputMaybe<Scalars['BigInt']['input']>;
  expirationDuration_gt?: InputMaybe<Scalars['BigInt']['input']>;
  expirationDuration_gte?: InputMaybe<Scalars['BigInt']['input']>;
  expirationDuration_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  expirationDuration_lt?: InputMaybe<Scalars['BigInt']['input']>;
  expirationDuration_lte?: InputMaybe<Scalars['BigInt']['input']>;
  expirationDuration_not?: InputMaybe<Scalars['BigInt']['input']>;
  expirationDuration_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  id?: InputMaybe<Scalars['ID']['input']>;
  id_gt?: InputMaybe<Scalars['ID']['input']>;
  id_gte?: InputMaybe<Scalars['ID']['input']>;
  id_in?: InputMaybe<Array<Scalars['ID']['input']>>;
  id_lt?: InputMaybe<Scalars['ID']['input']>;
  id_lte?: InputMaybe<Scalars['ID']['input']>;
  id_not?: InputMaybe<Scalars['ID']['input']>;
  id_not_in?: InputMaybe<Array<Scalars['ID']['input']>>;
  keys_?: InputMaybe<Key_Filter>;
  lastKeyMintedAt?: InputMaybe<Scalars['BigInt']['input']>;
  lastKeyMintedAt_gt?: InputMaybe<Scalars['BigInt']['input']>;
  lastKeyMintedAt_gte?: InputMaybe<Scalars['BigInt']['input']>;
  lastKeyMintedAt_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  lastKeyMintedAt_lt?: InputMaybe<Scalars['BigInt']['input']>;
  lastKeyMintedAt_lte?: InputMaybe<Scalars['BigInt']['input']>;
  lastKeyMintedAt_not?: InputMaybe<Scalars['BigInt']['input']>;
  lastKeyMintedAt_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  lockManagers?: InputMaybe<Array<Scalars['Bytes']['input']>>;
  lockManagers_contains?: InputMaybe<Array<Scalars['Bytes']['input']>>;
  lockManagers_contains_nocase?: InputMaybe<Array<Scalars['Bytes']['input']>>;
  lockManagers_not?: InputMaybe<Array<Scalars['Bytes']['input']>>;
  lockManagers_not_contains?: InputMaybe<Array<Scalars['Bytes']['input']>>;
  lockManagers_not_contains_nocase?: InputMaybe<Array<Scalars['Bytes']['input']>>;
  maxKeysPerAddress?: InputMaybe<Scalars['BigInt']['input']>;
  maxKeysPerAddress_gt?: InputMaybe<Scalars['BigInt']['input']>;
  maxKeysPerAddress_gte?: InputMaybe<Scalars['BigInt']['input']>;
  maxKeysPerAddress_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  maxKeysPerAddress_lt?: InputMaybe<Scalars['BigInt']['input']>;
  maxKeysPerAddress_lte?: InputMaybe<Scalars['BigInt']['input']>;
  maxKeysPerAddress_not?: InputMaybe<Scalars['BigInt']['input']>;
  maxKeysPerAddress_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  maxNumberOfKeys?: InputMaybe<Scalars['BigInt']['input']>;
  maxNumberOfKeys_gt?: InputMaybe<Scalars['BigInt']['input']>;
  maxNumberOfKeys_gte?: InputMaybe<Scalars['BigInt']['input']>;
  maxNumberOfKeys_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  maxNumberOfKeys_lt?: InputMaybe<Scalars['BigInt']['input']>;
  maxNumberOfKeys_lte?: InputMaybe<Scalars['BigInt']['input']>;
  maxNumberOfKeys_not?: InputMaybe<Scalars['BigInt']['input']>;
  maxNumberOfKeys_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  name?: InputMaybe<Scalars['String']['input']>;
  name_contains?: InputMaybe<Scalars['String']['input']>;
  name_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  name_ends_with?: InputMaybe<Scalars['String']['input']>;
  name_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  name_gt?: InputMaybe<Scalars['String']['input']>;
  name_gte?: InputMaybe<Scalars['String']['input']>;
  name_in?: InputMaybe<Array<Scalars['String']['input']>>;
  name_lt?: InputMaybe<Scalars['String']['input']>;
  name_lte?: InputMaybe<Scalars['String']['input']>;
  name_not?: InputMaybe<Scalars['String']['input']>;
  name_not_contains?: InputMaybe<Scalars['String']['input']>;
  name_not_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  name_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  name_not_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  name_not_in?: InputMaybe<Array<Scalars['String']['input']>>;
  name_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  name_not_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  name_starts_with?: InputMaybe<Scalars['String']['input']>;
  name_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  numberOfReceipts?: InputMaybe<Scalars['BigInt']['input']>;
  numberOfReceipts_gt?: InputMaybe<Scalars['BigInt']['input']>;
  numberOfReceipts_gte?: InputMaybe<Scalars['BigInt']['input']>;
  numberOfReceipts_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  numberOfReceipts_lt?: InputMaybe<Scalars['BigInt']['input']>;
  numberOfReceipts_lte?: InputMaybe<Scalars['BigInt']['input']>;
  numberOfReceipts_not?: InputMaybe<Scalars['BigInt']['input']>;
  numberOfReceipts_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  or?: InputMaybe<Array<InputMaybe<Lock_Filter>>>;
  price?: InputMaybe<Scalars['BigInt']['input']>;
  price_gt?: InputMaybe<Scalars['BigInt']['input']>;
  price_gte?: InputMaybe<Scalars['BigInt']['input']>;
  price_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  price_lt?: InputMaybe<Scalars['BigInt']['input']>;
  price_lte?: InputMaybe<Scalars['BigInt']['input']>;
  price_not?: InputMaybe<Scalars['BigInt']['input']>;
  price_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  referrerFees_?: InputMaybe<ReferrerFee_Filter>;
  symbol?: InputMaybe<Scalars['String']['input']>;
  symbol_contains?: InputMaybe<Scalars['String']['input']>;
  symbol_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  symbol_ends_with?: InputMaybe<Scalars['String']['input']>;
  symbol_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  symbol_gt?: InputMaybe<Scalars['String']['input']>;
  symbol_gte?: InputMaybe<Scalars['String']['input']>;
  symbol_in?: InputMaybe<Array<Scalars['String']['input']>>;
  symbol_lt?: InputMaybe<Scalars['String']['input']>;
  symbol_lte?: InputMaybe<Scalars['String']['input']>;
  symbol_not?: InputMaybe<Scalars['String']['input']>;
  symbol_not_contains?: InputMaybe<Scalars['String']['input']>;
  symbol_not_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  symbol_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  symbol_not_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  symbol_not_in?: InputMaybe<Array<Scalars['String']['input']>>;
  symbol_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  symbol_not_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  symbol_starts_with?: InputMaybe<Scalars['String']['input']>;
  symbol_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  tokenAddress?: InputMaybe<Scalars['Bytes']['input']>;
  tokenAddress_contains?: InputMaybe<Scalars['Bytes']['input']>;
  tokenAddress_gt?: InputMaybe<Scalars['Bytes']['input']>;
  tokenAddress_gte?: InputMaybe<Scalars['Bytes']['input']>;
  tokenAddress_in?: InputMaybe<Array<Scalars['Bytes']['input']>>;
  tokenAddress_lt?: InputMaybe<Scalars['Bytes']['input']>;
  tokenAddress_lte?: InputMaybe<Scalars['Bytes']['input']>;
  tokenAddress_not?: InputMaybe<Scalars['Bytes']['input']>;
  tokenAddress_not_contains?: InputMaybe<Scalars['Bytes']['input']>;
  tokenAddress_not_in?: InputMaybe<Array<Scalars['Bytes']['input']>>;
  totalKeys?: InputMaybe<Scalars['BigInt']['input']>;
  totalKeys_gt?: InputMaybe<Scalars['BigInt']['input']>;
  totalKeys_gte?: InputMaybe<Scalars['BigInt']['input']>;
  totalKeys_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  totalKeys_lt?: InputMaybe<Scalars['BigInt']['input']>;
  totalKeys_lte?: InputMaybe<Scalars['BigInt']['input']>;
  totalKeys_not?: InputMaybe<Scalars['BigInt']['input']>;
  totalKeys_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  version?: InputMaybe<Scalars['BigInt']['input']>;
  version_gt?: InputMaybe<Scalars['BigInt']['input']>;
  version_gte?: InputMaybe<Scalars['BigInt']['input']>;
  version_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  version_lt?: InputMaybe<Scalars['BigInt']['input']>;
  version_lte?: InputMaybe<Scalars['BigInt']['input']>;
  version_not?: InputMaybe<Scalars['BigInt']['input']>;
  version_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
};

export enum Lock_OrderBy {
  Address = 'address',
  CreatedAtBlock = 'createdAtBlock',
  Deployer = 'deployer',
  ExpirationDuration = 'expirationDuration',
  Id = 'id',
  Keys = 'keys',
  LastKeyMintedAt = 'lastKeyMintedAt',
  LockManagers = 'lockManagers',
  MaxKeysPerAddress = 'maxKeysPerAddress',
  MaxNumberOfKeys = 'maxNumberOfKeys',
  Name = 'name',
  NumberOfReceipts = 'numberOfReceipts',
  Price = 'price',
  ReferrerFees = 'referrerFees',
  Symbol = 'symbol',
  TokenAddress = 'tokenAddress',
  TotalKeys = 'totalKeys',
  Version = 'version'
}

/** Defines the order direction, either ascending or descending */
export enum OrderDirection {
  Asc = 'asc',
  Desc = 'desc'
}

export type Query = {
  __typename?: 'Query';
  /** Access to subgraph metadata */
  _meta?: Maybe<_Meta_>;
  key?: Maybe<Key>;
  keys: Array<Key>;
  lock?: Maybe<Lock>;
  lockStats: Array<LockStats>;
  locks: Array<Lock>;
  receipt?: Maybe<Receipt>;
  receipts: Array<Receipt>;
  referrerFee?: Maybe<ReferrerFee>;
  referrerFees: Array<ReferrerFee>;
  unlockDailyData?: Maybe<UnlockDailyData>;
  unlockDailyDatas: Array<UnlockDailyData>;
  unlockStats: Array<UnlockStats>;
};


export type Query_MetaArgs = {
  block?: InputMaybe<Block_Height>;
};


export type QueryKeyArgs = {
  block?: InputMaybe<Block_Height>;
  id: Scalars['ID']['input'];
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryKeysArgs = {
  block?: InputMaybe<Block_Height>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Key_OrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  subgraphError?: _SubgraphErrorPolicy_;
  where?: InputMaybe<Key_Filter>;
};


export type QueryLockArgs = {
  block?: InputMaybe<Block_Height>;
  id: Scalars['ID']['input'];
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryLockStatsArgs = {
  block?: InputMaybe<Block_Height>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<LockStats_OrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  subgraphError?: _SubgraphErrorPolicy_;
  where?: InputMaybe<LockStats_Filter>;
};


export type QueryLocksArgs = {
  block?: InputMaybe<Block_Height>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Lock_OrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  subgraphError?: _SubgraphErrorPolicy_;
  where?: InputMaybe<Lock_Filter>;
};


export type QueryReceiptArgs = {
  block?: InputMaybe<Block_Height>;
  id: Scalars['ID']['input'];
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryReceiptsArgs = {
  block?: InputMaybe<Block_Height>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Receipt_OrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  subgraphError?: _SubgraphErrorPolicy_;
  where?: InputMaybe<Receipt_Filter>;
};


export type QueryReferrerFeeArgs = {
  block?: InputMaybe<Block_Height>;
  id: Scalars['ID']['input'];
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryReferrerFeesArgs = {
  block?: InputMaybe<Block_Height>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<ReferrerFee_OrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  subgraphError?: _SubgraphErrorPolicy_;
  where?: InputMaybe<ReferrerFee_Filter>;
};


export type QueryUnlockDailyDataArgs = {
  block?: InputMaybe<Block_Height>;
  id: Scalars['ID']['input'];
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryUnlockDailyDatasArgs = {
  block?: InputMaybe<Block_Height>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<UnlockDailyData_OrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  subgraphError?: _SubgraphErrorPolicy_;
  where?: InputMaybe<UnlockDailyData_Filter>;
};


export type QueryUnlockStatsArgs = {
  block?: InputMaybe<Block_Height>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<UnlockStats_OrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  subgraphError?: _SubgraphErrorPolicy_;
  where?: InputMaybe<UnlockStats_Filter>;
};

export type Receipt = {
  __typename?: 'Receipt';
  /** amount */
  amountTransferred: Scalars['BigInt']['output'];
  /** Total gas paid */
  gasTotal: Scalars['BigInt']['output'];
  /** Transaction Hash */
  id: Scalars['ID']['output'];
  /** Address of the Lock smart contract */
  lockAddress: Scalars['String']['output'];
  /** Payer in the case of an ERC20 lock renewal, the sender and payer might differ */
  payer?: Maybe<Scalars['String']['output']>;
  /** Increasing number of receipt */
  receiptNumber: Scalars['BigInt']['output'];
  /** Sender of the transaction */
  sender: Scalars['String']['output'];
  /** Timestamp */
  timestamp: Scalars['BigInt']['output'];
  /** Address of the 'currency' ERC20 contract if the keys are priced using an ERC20 */
  tokenAddress: Scalars['String']['output'];
};

export type Receipt_Filter = {
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<BlockChangedFilter>;
  amountTransferred?: InputMaybe<Scalars['BigInt']['input']>;
  amountTransferred_gt?: InputMaybe<Scalars['BigInt']['input']>;
  amountTransferred_gte?: InputMaybe<Scalars['BigInt']['input']>;
  amountTransferred_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  amountTransferred_lt?: InputMaybe<Scalars['BigInt']['input']>;
  amountTransferred_lte?: InputMaybe<Scalars['BigInt']['input']>;
  amountTransferred_not?: InputMaybe<Scalars['BigInt']['input']>;
  amountTransferred_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  and?: InputMaybe<Array<InputMaybe<Receipt_Filter>>>;
  gasTotal?: InputMaybe<Scalars['BigInt']['input']>;
  gasTotal_gt?: InputMaybe<Scalars['BigInt']['input']>;
  gasTotal_gte?: InputMaybe<Scalars['BigInt']['input']>;
  gasTotal_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  gasTotal_lt?: InputMaybe<Scalars['BigInt']['input']>;
  gasTotal_lte?: InputMaybe<Scalars['BigInt']['input']>;
  gasTotal_not?: InputMaybe<Scalars['BigInt']['input']>;
  gasTotal_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  id?: InputMaybe<Scalars['ID']['input']>;
  id_gt?: InputMaybe<Scalars['ID']['input']>;
  id_gte?: InputMaybe<Scalars['ID']['input']>;
  id_in?: InputMaybe<Array<Scalars['ID']['input']>>;
  id_lt?: InputMaybe<Scalars['ID']['input']>;
  id_lte?: InputMaybe<Scalars['ID']['input']>;
  id_not?: InputMaybe<Scalars['ID']['input']>;
  id_not_in?: InputMaybe<Array<Scalars['ID']['input']>>;
  lockAddress?: InputMaybe<Scalars['String']['input']>;
  lockAddress_contains?: InputMaybe<Scalars['String']['input']>;
  lockAddress_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  lockAddress_ends_with?: InputMaybe<Scalars['String']['input']>;
  lockAddress_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  lockAddress_gt?: InputMaybe<Scalars['String']['input']>;
  lockAddress_gte?: InputMaybe<Scalars['String']['input']>;
  lockAddress_in?: InputMaybe<Array<Scalars['String']['input']>>;
  lockAddress_lt?: InputMaybe<Scalars['String']['input']>;
  lockAddress_lte?: InputMaybe<Scalars['String']['input']>;
  lockAddress_not?: InputMaybe<Scalars['String']['input']>;
  lockAddress_not_contains?: InputMaybe<Scalars['String']['input']>;
  lockAddress_not_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  lockAddress_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  lockAddress_not_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  lockAddress_not_in?: InputMaybe<Array<Scalars['String']['input']>>;
  lockAddress_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  lockAddress_not_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  lockAddress_starts_with?: InputMaybe<Scalars['String']['input']>;
  lockAddress_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  or?: InputMaybe<Array<InputMaybe<Receipt_Filter>>>;
  payer?: InputMaybe<Scalars['String']['input']>;
  payer_contains?: InputMaybe<Scalars['String']['input']>;
  payer_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  payer_ends_with?: InputMaybe<Scalars['String']['input']>;
  payer_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  payer_gt?: InputMaybe<Scalars['String']['input']>;
  payer_gte?: InputMaybe<Scalars['String']['input']>;
  payer_in?: InputMaybe<Array<Scalars['String']['input']>>;
  payer_lt?: InputMaybe<Scalars['String']['input']>;
  payer_lte?: InputMaybe<Scalars['String']['input']>;
  payer_not?: InputMaybe<Scalars['String']['input']>;
  payer_not_contains?: InputMaybe<Scalars['String']['input']>;
  payer_not_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  payer_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  payer_not_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  payer_not_in?: InputMaybe<Array<Scalars['String']['input']>>;
  payer_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  payer_not_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  payer_starts_with?: InputMaybe<Scalars['String']['input']>;
  payer_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  receiptNumber?: InputMaybe<Scalars['BigInt']['input']>;
  receiptNumber_gt?: InputMaybe<Scalars['BigInt']['input']>;
  receiptNumber_gte?: InputMaybe<Scalars['BigInt']['input']>;
  receiptNumber_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  receiptNumber_lt?: InputMaybe<Scalars['BigInt']['input']>;
  receiptNumber_lte?: InputMaybe<Scalars['BigInt']['input']>;
  receiptNumber_not?: InputMaybe<Scalars['BigInt']['input']>;
  receiptNumber_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  sender?: InputMaybe<Scalars['String']['input']>;
  sender_contains?: InputMaybe<Scalars['String']['input']>;
  sender_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  sender_ends_with?: InputMaybe<Scalars['String']['input']>;
  sender_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  sender_gt?: InputMaybe<Scalars['String']['input']>;
  sender_gte?: InputMaybe<Scalars['String']['input']>;
  sender_in?: InputMaybe<Array<Scalars['String']['input']>>;
  sender_lt?: InputMaybe<Scalars['String']['input']>;
  sender_lte?: InputMaybe<Scalars['String']['input']>;
  sender_not?: InputMaybe<Scalars['String']['input']>;
  sender_not_contains?: InputMaybe<Scalars['String']['input']>;
  sender_not_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  sender_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  sender_not_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  sender_not_in?: InputMaybe<Array<Scalars['String']['input']>>;
  sender_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  sender_not_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  sender_starts_with?: InputMaybe<Scalars['String']['input']>;
  sender_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  timestamp?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']['input']>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  tokenAddress?: InputMaybe<Scalars['String']['input']>;
  tokenAddress_contains?: InputMaybe<Scalars['String']['input']>;
  tokenAddress_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  tokenAddress_ends_with?: InputMaybe<Scalars['String']['input']>;
  tokenAddress_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  tokenAddress_gt?: InputMaybe<Scalars['String']['input']>;
  tokenAddress_gte?: InputMaybe<Scalars['String']['input']>;
  tokenAddress_in?: InputMaybe<Array<Scalars['String']['input']>>;
  tokenAddress_lt?: InputMaybe<Scalars['String']['input']>;
  tokenAddress_lte?: InputMaybe<Scalars['String']['input']>;
  tokenAddress_not?: InputMaybe<Scalars['String']['input']>;
  tokenAddress_not_contains?: InputMaybe<Scalars['String']['input']>;
  tokenAddress_not_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  tokenAddress_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  tokenAddress_not_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  tokenAddress_not_in?: InputMaybe<Array<Scalars['String']['input']>>;
  tokenAddress_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  tokenAddress_not_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  tokenAddress_starts_with?: InputMaybe<Scalars['String']['input']>;
  tokenAddress_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
};

export enum Receipt_OrderBy {
  AmountTransferred = 'amountTransferred',
  GasTotal = 'gasTotal',
  Id = 'id',
  LockAddress = 'lockAddress',
  Payer = 'payer',
  ReceiptNumber = 'receiptNumber',
  Sender = 'sender',
  Timestamp = 'timestamp',
  TokenAddress = 'tokenAddress'
}

export type ReferrerFee = {
  __typename?: 'ReferrerFee';
  /** Fee attributed to the referrer. E.g., 200 represents 20%. */
  fee: Scalars['BigInt']['output'];
  /** Address of the Referrer */
  id: Scalars['ID']['output'];
  /** In the Unlock ecosystem, a “Lock” is a smart contract that creates (or “mints”) NFTs */
  lock: Lock;
  /** Address of the referrer. */
  referrer: Scalars['Bytes']['output'];
};

export type ReferrerFee_Filter = {
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<ReferrerFee_Filter>>>;
  fee?: InputMaybe<Scalars['BigInt']['input']>;
  fee_gt?: InputMaybe<Scalars['BigInt']['input']>;
  fee_gte?: InputMaybe<Scalars['BigInt']['input']>;
  fee_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  fee_lt?: InputMaybe<Scalars['BigInt']['input']>;
  fee_lte?: InputMaybe<Scalars['BigInt']['input']>;
  fee_not?: InputMaybe<Scalars['BigInt']['input']>;
  fee_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  id?: InputMaybe<Scalars['ID']['input']>;
  id_gt?: InputMaybe<Scalars['ID']['input']>;
  id_gte?: InputMaybe<Scalars['ID']['input']>;
  id_in?: InputMaybe<Array<Scalars['ID']['input']>>;
  id_lt?: InputMaybe<Scalars['ID']['input']>;
  id_lte?: InputMaybe<Scalars['ID']['input']>;
  id_not?: InputMaybe<Scalars['ID']['input']>;
  id_not_in?: InputMaybe<Array<Scalars['ID']['input']>>;
  lock?: InputMaybe<Scalars['String']['input']>;
  lock_?: InputMaybe<Lock_Filter>;
  lock_contains?: InputMaybe<Scalars['String']['input']>;
  lock_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  lock_ends_with?: InputMaybe<Scalars['String']['input']>;
  lock_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  lock_gt?: InputMaybe<Scalars['String']['input']>;
  lock_gte?: InputMaybe<Scalars['String']['input']>;
  lock_in?: InputMaybe<Array<Scalars['String']['input']>>;
  lock_lt?: InputMaybe<Scalars['String']['input']>;
  lock_lte?: InputMaybe<Scalars['String']['input']>;
  lock_not?: InputMaybe<Scalars['String']['input']>;
  lock_not_contains?: InputMaybe<Scalars['String']['input']>;
  lock_not_contains_nocase?: InputMaybe<Scalars['String']['input']>;
  lock_not_ends_with?: InputMaybe<Scalars['String']['input']>;
  lock_not_ends_with_nocase?: InputMaybe<Scalars['String']['input']>;
  lock_not_in?: InputMaybe<Array<Scalars['String']['input']>>;
  lock_not_starts_with?: InputMaybe<Scalars['String']['input']>;
  lock_not_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  lock_starts_with?: InputMaybe<Scalars['String']['input']>;
  lock_starts_with_nocase?: InputMaybe<Scalars['String']['input']>;
  or?: InputMaybe<Array<InputMaybe<ReferrerFee_Filter>>>;
  referrer?: InputMaybe<Scalars['Bytes']['input']>;
  referrer_contains?: InputMaybe<Scalars['Bytes']['input']>;
  referrer_gt?: InputMaybe<Scalars['Bytes']['input']>;
  referrer_gte?: InputMaybe<Scalars['Bytes']['input']>;
  referrer_in?: InputMaybe<Array<Scalars['Bytes']['input']>>;
  referrer_lt?: InputMaybe<Scalars['Bytes']['input']>;
  referrer_lte?: InputMaybe<Scalars['Bytes']['input']>;
  referrer_not?: InputMaybe<Scalars['Bytes']['input']>;
  referrer_not_contains?: InputMaybe<Scalars['Bytes']['input']>;
  referrer_not_in?: InputMaybe<Array<Scalars['Bytes']['input']>>;
};

export enum ReferrerFee_OrderBy {
  Fee = 'fee',
  Id = 'id',
  Lock = 'lock',
  LockAddress = 'lock__address',
  LockCreatedAtBlock = 'lock__createdAtBlock',
  LockDeployer = 'lock__deployer',
  LockExpirationDuration = 'lock__expirationDuration',
  LockId = 'lock__id',
  LockLastKeyMintedAt = 'lock__lastKeyMintedAt',
  LockMaxKeysPerAddress = 'lock__maxKeysPerAddress',
  LockMaxNumberOfKeys = 'lock__maxNumberOfKeys',
  LockName = 'lock__name',
  LockNumberOfReceipts = 'lock__numberOfReceipts',
  LockPrice = 'lock__price',
  LockSymbol = 'lock__symbol',
  LockTokenAddress = 'lock__tokenAddress',
  LockTotalKeys = 'lock__totalKeys',
  LockVersion = 'lock__version',
  Referrer = 'referrer'
}

export type Subscription = {
  __typename?: 'Subscription';
  /** Access to subgraph metadata */
  _meta?: Maybe<_Meta_>;
  key?: Maybe<Key>;
  keys: Array<Key>;
  lock?: Maybe<Lock>;
  lockStats: Array<LockStats>;
  locks: Array<Lock>;
  receipt?: Maybe<Receipt>;
  receipts: Array<Receipt>;
  referrerFee?: Maybe<ReferrerFee>;
  referrerFees: Array<ReferrerFee>;
  unlockDailyData?: Maybe<UnlockDailyData>;
  unlockDailyDatas: Array<UnlockDailyData>;
  unlockStats: Array<UnlockStats>;
};


export type Subscription_MetaArgs = {
  block?: InputMaybe<Block_Height>;
};


export type SubscriptionKeyArgs = {
  block?: InputMaybe<Block_Height>;
  id: Scalars['ID']['input'];
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionKeysArgs = {
  block?: InputMaybe<Block_Height>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Key_OrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  subgraphError?: _SubgraphErrorPolicy_;
  where?: InputMaybe<Key_Filter>;
};


export type SubscriptionLockArgs = {
  block?: InputMaybe<Block_Height>;
  id: Scalars['ID']['input'];
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionLockStatsArgs = {
  block?: InputMaybe<Block_Height>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<LockStats_OrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  subgraphError?: _SubgraphErrorPolicy_;
  where?: InputMaybe<LockStats_Filter>;
};


export type SubscriptionLocksArgs = {
  block?: InputMaybe<Block_Height>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Lock_OrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  subgraphError?: _SubgraphErrorPolicy_;
  where?: InputMaybe<Lock_Filter>;
};


export type SubscriptionReceiptArgs = {
  block?: InputMaybe<Block_Height>;
  id: Scalars['ID']['input'];
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionReceiptsArgs = {
  block?: InputMaybe<Block_Height>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Receipt_OrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  subgraphError?: _SubgraphErrorPolicy_;
  where?: InputMaybe<Receipt_Filter>;
};


export type SubscriptionReferrerFeeArgs = {
  block?: InputMaybe<Block_Height>;
  id: Scalars['ID']['input'];
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionReferrerFeesArgs = {
  block?: InputMaybe<Block_Height>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<ReferrerFee_OrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  subgraphError?: _SubgraphErrorPolicy_;
  where?: InputMaybe<ReferrerFee_Filter>;
};


export type SubscriptionUnlockDailyDataArgs = {
  block?: InputMaybe<Block_Height>;
  id: Scalars['ID']['input'];
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionUnlockDailyDatasArgs = {
  block?: InputMaybe<Block_Height>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<UnlockDailyData_OrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  subgraphError?: _SubgraphErrorPolicy_;
  where?: InputMaybe<UnlockDailyData_Filter>;
};


export type SubscriptionUnlockStatsArgs = {
  block?: InputMaybe<Block_Height>;
  first?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<UnlockStats_OrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  subgraphError?: _SubgraphErrorPolicy_;
  where?: InputMaybe<UnlockStats_Filter>;
};

export type UnlockDailyData = {
  __typename?: 'UnlockDailyData';
  /** Daily number of active locks (active locks have minted at least one membership in the last 30 days */
  activeLocks?: Maybe<Array<Scalars['Bytes']['output']>>;
  /** Total value exchanged on the network */
  grossNetworkProduct: Scalars['BigInt']['output'];
  /** Day identifier */
  id: Scalars['ID']['output'];
  /** Daily number of keys sold */
  keysSold: Scalars['BigInt']['output'];
  /** Number of locks deployed on that day */
  lockDeployed: Scalars['BigInt']['output'];
  /** Total number of keys sold */
  totalKeysSold: Scalars['BigInt']['output'];
  /** Total number of locks deployed */
  totalLockDeployed: Scalars['BigInt']['output'];
};

export type UnlockDailyData_Filter = {
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<BlockChangedFilter>;
  activeLocks?: InputMaybe<Array<Scalars['Bytes']['input']>>;
  activeLocks_contains?: InputMaybe<Array<Scalars['Bytes']['input']>>;
  activeLocks_contains_nocase?: InputMaybe<Array<Scalars['Bytes']['input']>>;
  activeLocks_not?: InputMaybe<Array<Scalars['Bytes']['input']>>;
  activeLocks_not_contains?: InputMaybe<Array<Scalars['Bytes']['input']>>;
  activeLocks_not_contains_nocase?: InputMaybe<Array<Scalars['Bytes']['input']>>;
  and?: InputMaybe<Array<InputMaybe<UnlockDailyData_Filter>>>;
  grossNetworkProduct?: InputMaybe<Scalars['BigInt']['input']>;
  grossNetworkProduct_gt?: InputMaybe<Scalars['BigInt']['input']>;
  grossNetworkProduct_gte?: InputMaybe<Scalars['BigInt']['input']>;
  grossNetworkProduct_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  grossNetworkProduct_lt?: InputMaybe<Scalars['BigInt']['input']>;
  grossNetworkProduct_lte?: InputMaybe<Scalars['BigInt']['input']>;
  grossNetworkProduct_not?: InputMaybe<Scalars['BigInt']['input']>;
  grossNetworkProduct_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  id?: InputMaybe<Scalars['ID']['input']>;
  id_gt?: InputMaybe<Scalars['ID']['input']>;
  id_gte?: InputMaybe<Scalars['ID']['input']>;
  id_in?: InputMaybe<Array<Scalars['ID']['input']>>;
  id_lt?: InputMaybe<Scalars['ID']['input']>;
  id_lte?: InputMaybe<Scalars['ID']['input']>;
  id_not?: InputMaybe<Scalars['ID']['input']>;
  id_not_in?: InputMaybe<Array<Scalars['ID']['input']>>;
  keysSold?: InputMaybe<Scalars['BigInt']['input']>;
  keysSold_gt?: InputMaybe<Scalars['BigInt']['input']>;
  keysSold_gte?: InputMaybe<Scalars['BigInt']['input']>;
  keysSold_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  keysSold_lt?: InputMaybe<Scalars['BigInt']['input']>;
  keysSold_lte?: InputMaybe<Scalars['BigInt']['input']>;
  keysSold_not?: InputMaybe<Scalars['BigInt']['input']>;
  keysSold_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  lockDeployed?: InputMaybe<Scalars['BigInt']['input']>;
  lockDeployed_gt?: InputMaybe<Scalars['BigInt']['input']>;
  lockDeployed_gte?: InputMaybe<Scalars['BigInt']['input']>;
  lockDeployed_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  lockDeployed_lt?: InputMaybe<Scalars['BigInt']['input']>;
  lockDeployed_lte?: InputMaybe<Scalars['BigInt']['input']>;
  lockDeployed_not?: InputMaybe<Scalars['BigInt']['input']>;
  lockDeployed_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  or?: InputMaybe<Array<InputMaybe<UnlockDailyData_Filter>>>;
  totalKeysSold?: InputMaybe<Scalars['BigInt']['input']>;
  totalKeysSold_gt?: InputMaybe<Scalars['BigInt']['input']>;
  totalKeysSold_gte?: InputMaybe<Scalars['BigInt']['input']>;
  totalKeysSold_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  totalKeysSold_lt?: InputMaybe<Scalars['BigInt']['input']>;
  totalKeysSold_lte?: InputMaybe<Scalars['BigInt']['input']>;
  totalKeysSold_not?: InputMaybe<Scalars['BigInt']['input']>;
  totalKeysSold_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  totalLockDeployed?: InputMaybe<Scalars['BigInt']['input']>;
  totalLockDeployed_gt?: InputMaybe<Scalars['BigInt']['input']>;
  totalLockDeployed_gte?: InputMaybe<Scalars['BigInt']['input']>;
  totalLockDeployed_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  totalLockDeployed_lt?: InputMaybe<Scalars['BigInt']['input']>;
  totalLockDeployed_lte?: InputMaybe<Scalars['BigInt']['input']>;
  totalLockDeployed_not?: InputMaybe<Scalars['BigInt']['input']>;
  totalLockDeployed_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
};

export enum UnlockDailyData_OrderBy {
  ActiveLocks = 'activeLocks',
  GrossNetworkProduct = 'grossNetworkProduct',
  Id = 'id',
  KeysSold = 'keysSold',
  LockDeployed = 'lockDeployed',
  TotalKeysSold = 'totalKeysSold',
  TotalLockDeployed = 'totalLockDeployed'
}

export type UnlockStats = {
  __typename?: 'UnlockStats';
  /** Total value exchanged on the network */
  grossNetworkProduct: Scalars['BigInt']['output'];
  /** Identifier */
  id: Scalars['ID']['output'];
  /** Total number of keys sold */
  totalKeysSold: Scalars['BigInt']['output'];
  /** Total number of locks deployed */
  totalLockDeployed: Scalars['BigInt']['output'];
};

export type UnlockStats_Filter = {
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<UnlockStats_Filter>>>;
  grossNetworkProduct?: InputMaybe<Scalars['BigInt']['input']>;
  grossNetworkProduct_gt?: InputMaybe<Scalars['BigInt']['input']>;
  grossNetworkProduct_gte?: InputMaybe<Scalars['BigInt']['input']>;
  grossNetworkProduct_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  grossNetworkProduct_lt?: InputMaybe<Scalars['BigInt']['input']>;
  grossNetworkProduct_lte?: InputMaybe<Scalars['BigInt']['input']>;
  grossNetworkProduct_not?: InputMaybe<Scalars['BigInt']['input']>;
  grossNetworkProduct_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  id?: InputMaybe<Scalars['ID']['input']>;
  id_gt?: InputMaybe<Scalars['ID']['input']>;
  id_gte?: InputMaybe<Scalars['ID']['input']>;
  id_in?: InputMaybe<Array<Scalars['ID']['input']>>;
  id_lt?: InputMaybe<Scalars['ID']['input']>;
  id_lte?: InputMaybe<Scalars['ID']['input']>;
  id_not?: InputMaybe<Scalars['ID']['input']>;
  id_not_in?: InputMaybe<Array<Scalars['ID']['input']>>;
  or?: InputMaybe<Array<InputMaybe<UnlockStats_Filter>>>;
  totalKeysSold?: InputMaybe<Scalars['BigInt']['input']>;
  totalKeysSold_gt?: InputMaybe<Scalars['BigInt']['input']>;
  totalKeysSold_gte?: InputMaybe<Scalars['BigInt']['input']>;
  totalKeysSold_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  totalKeysSold_lt?: InputMaybe<Scalars['BigInt']['input']>;
  totalKeysSold_lte?: InputMaybe<Scalars['BigInt']['input']>;
  totalKeysSold_not?: InputMaybe<Scalars['BigInt']['input']>;
  totalKeysSold_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  totalLockDeployed?: InputMaybe<Scalars['BigInt']['input']>;
  totalLockDeployed_gt?: InputMaybe<Scalars['BigInt']['input']>;
  totalLockDeployed_gte?: InputMaybe<Scalars['BigInt']['input']>;
  totalLockDeployed_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  totalLockDeployed_lt?: InputMaybe<Scalars['BigInt']['input']>;
  totalLockDeployed_lte?: InputMaybe<Scalars['BigInt']['input']>;
  totalLockDeployed_not?: InputMaybe<Scalars['BigInt']['input']>;
  totalLockDeployed_not_in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
};

export enum UnlockStats_OrderBy {
  GrossNetworkProduct = 'grossNetworkProduct',
  Id = 'id',
  TotalKeysSold = 'totalKeysSold',
  TotalLockDeployed = 'totalLockDeployed'
}

export type _Block_ = {
  __typename?: '_Block_';
  /** The hash of the block */
  hash?: Maybe<Scalars['Bytes']['output']>;
  /** The block number */
  number: Scalars['Int']['output'];
  /** Integer representation of the timestamp stored in blocks for the chain */
  timestamp?: Maybe<Scalars['Int']['output']>;
};

/** The type for the top-level _meta field */
export type _Meta_ = {
  __typename?: '_Meta_';
  /**
   * Information about a specific subgraph block. The hash of the block
   * will be null if the _meta field has a block constraint that asks for
   * a block number. It will be filled if the _meta field has no block constraint
   * and therefore asks for the latest  block
   *
   */
  block: _Block_;
  /** The deployment ID */
  deployment: Scalars['String']['output'];
  /** If `true`, the subgraph encountered indexing errors at some past block */
  hasIndexingErrors: Scalars['Boolean']['output'];
};

export enum _SubgraphErrorPolicy_ {
  /** Data will be returned even if the subgraph has indexing errors */
  Allow = 'allow',
  /** If the subgraph has indexing errors, data will be omitted. The default. */
  Deny = 'deny'
}

export type AllLocksQueryVariables = Exact<{
  first?: InputMaybe<Scalars['Int']['input']>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<Lock_Filter>;
  orderBy?: InputMaybe<Lock_OrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  referrerFeeSkip?: InputMaybe<Scalars['Int']['input']>;
}>;


export type AllLocksQuery = { __typename?: 'Query', locks: Array<{ __typename?: 'Lock', id: string, address: any, name?: string | null, expirationDuration?: any | null, tokenAddress: any, symbol?: string | null, price: any, lockManagers: Array<any>, version: any, maxNumberOfKeys?: any | null, maxKeysPerAddress?: any | null, createdAtBlock?: any | null, totalKeys: any, referrerFees: Array<{ __typename?: 'ReferrerFee', id: string, referrer: any, fee: any }> }> };

export type AllKeysQueryVariables = Exact<{
  first?: InputMaybe<Scalars['Int']['input']>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<Key_Filter>;
  orderBy?: InputMaybe<Key_OrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
}>;


export type AllKeysQuery = { __typename?: 'Query', keys: Array<{ __typename?: 'Key', id: string, tokenId: any, owner: any, manager?: any | null, expiration: any, tokenURI?: string | null, createdAtBlock: any, cancelled?: boolean | null, transactionsHash?: Array<string> | null, lock: { __typename?: 'Lock', id: string, address: any, name?: string | null, expirationDuration?: any | null, tokenAddress: any, symbol?: string | null, price: any, lockManagers: Array<any>, version: any, maxNumberOfKeys?: any | null, maxKeysPerAddress?: any | null, createdAtBlock?: any | null, totalKeys: any } }> };

export type AllReceiptsQueryVariables = Exact<{
  first?: InputMaybe<Scalars['Int']['input']>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<Receipt_Filter>;
  orderBy?: InputMaybe<Receipt_OrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
}>;


export type AllReceiptsQuery = { __typename?: 'Query', receipts: Array<{ __typename?: 'Receipt', id: string, receiptNumber: any, timestamp: any, sender: string, payer?: string | null, lockAddress: string, tokenAddress: string, gasTotal: any, amountTransferred: any }> };

export type AllLocksWithKeysQueryVariables = Exact<{
  first?: InputMaybe<Scalars['Int']['input']>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<Lock_Filter>;
  keyFilter?: InputMaybe<Key_Filter>;
  orderBy?: InputMaybe<Lock_OrderBy>;
  keyOrderBy?: InputMaybe<Key_OrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
}>;


export type AllLocksWithKeysQuery = { __typename?: 'Query', locks: Array<{ __typename?: 'Lock', id: string, address: any, name?: string | null, expirationDuration?: any | null, tokenAddress: any, symbol?: string | null, price: any, lockManagers: Array<any>, version: any, maxNumberOfKeys?: any | null, maxKeysPerAddress?: any | null, createdAtBlock?: any | null, totalKeys: any, keys?: Array<{ __typename?: 'Key', id: string, tokenId: any, owner: any, manager?: any | null, expiration: any, tokenURI?: string | null, createdAtBlock: any, cancelled?: boolean | null, transactionsHash?: Array<string> | null }> | null }> };


export const AllLocksDocument = gql`
    query allLocks($first: Int = 1, $skip: Int, $where: Lock_filter, $orderBy: Lock_orderBy, $orderDirection: OrderDirection, $referrerFeeSkip: Int = 0) {
  locks(
    first: $first
    skip: $skip
    where: $where
    orderBy: $orderBy
    orderDirection: $orderDirection
  ) {
    id
    address
    name
    expirationDuration
    tokenAddress
    symbol
    price
    lockManagers
    version
    maxNumberOfKeys
    maxKeysPerAddress
    createdAtBlock
    totalKeys
    referrerFees(skip: $referrerFeeSkip) {
      id
      referrer
      fee
    }
  }
}
    `;
export const AllKeysDocument = gql`
    query AllKeys($first: Int = 1, $skip: Int, $where: Key_filter, $orderBy: Key_orderBy, $orderDirection: OrderDirection) {
  keys(
    first: $first
    skip: $skip
    where: $where
    orderBy: $orderBy
    orderDirection: $orderDirection
  ) {
    id
    lock {
      id
      address
      name
      expirationDuration
      tokenAddress
      symbol
      price
      lockManagers
      version
      maxNumberOfKeys
      maxKeysPerAddress
      createdAtBlock
      totalKeys
    }
    tokenId
    owner
    manager
    expiration
    tokenURI
    createdAtBlock
    cancelled
    transactionsHash
  }
}
    `;
export const AllReceiptsDocument = gql`
    query AllReceipts($first: Int = 100, $skip: Int, $where: Receipt_filter, $orderBy: Receipt_orderBy, $orderDirection: OrderDirection) {
  receipts(
    first: $first
    skip: $skip
    where: $where
    orderBy: $orderBy
    orderDirection: $orderDirection
  ) {
    id
    receiptNumber
    timestamp
    sender
    payer
    lockAddress
    tokenAddress
    gasTotal
    amountTransferred
  }
}
    `;
export const AllLocksWithKeysDocument = gql`
    query allLocksWithKeys($first: Int = 1, $skip: Int, $where: Lock_filter, $keyFilter: Key_filter, $orderBy: Lock_orderBy, $keyOrderBy: Key_orderBy, $orderDirection: OrderDirection) {
  locks(where: $where, orderBy: $orderBy, orderDirection: $orderDirection) {
    id
    address
    name
    expirationDuration
    tokenAddress
    symbol
    price
    lockManagers
    version
    maxNumberOfKeys
    maxKeysPerAddress
    createdAtBlock
    totalKeys
    keys(where: $keyFilter, orderBy: $keyOrderBy, first: $first, skip: $skip) {
      id
      tokenId
      owner
      manager
      expiration
      tokenURI
      createdAtBlock
      cancelled
      transactionsHash
    }
  }
}
    `;

export type SdkFunctionWrapper = <T>(action: (requestHeaders?:Record<string, string>) => Promise<T>, operationName: string, operationType?: string) => Promise<T>;


const defaultWrapper: SdkFunctionWrapper = (action, _operationName, _operationType) => action();

export function getSdk(client: GraphQLClient, withWrapper: SdkFunctionWrapper = defaultWrapper) {
  return {
    allLocks(variables?: AllLocksQueryVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<AllLocksQuery> {
      return withWrapper((wrappedRequestHeaders) => client.request<AllLocksQuery>(AllLocksDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'allLocks', 'query');
    },
    AllKeys(variables?: AllKeysQueryVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<AllKeysQuery> {
      return withWrapper((wrappedRequestHeaders) => client.request<AllKeysQuery>(AllKeysDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'AllKeys', 'query');
    },
    AllReceipts(variables?: AllReceiptsQueryVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<AllReceiptsQuery> {
      return withWrapper((wrappedRequestHeaders) => client.request<AllReceiptsQuery>(AllReceiptsDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'AllReceipts', 'query');
    },
    allLocksWithKeys(variables?: AllLocksWithKeysQueryVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<AllLocksWithKeysQuery> {
      return withWrapper((wrappedRequestHeaders) => client.request<AllLocksWithKeysQuery>(AllLocksWithKeysDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'allLocksWithKeys', 'query');
    }
  };
}
export type Sdk = ReturnType<typeof getSdk>;